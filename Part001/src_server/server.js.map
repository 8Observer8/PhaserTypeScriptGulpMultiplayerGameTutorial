{"version":3,"sources":["server.ts"],"names":[],"mappings":"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","file":"server.js","sourcesContent":["import * as express from \"express\";\r\nimport * as http from \"http\";\r\nimport * as socketIO from \"socket.io\";\r\nimport * as path from \"path\";\r\n\r\nimport { Player } from \"./Player\";\r\n\r\nclass GameServer\r\n{\r\n    private _ioServer: SocketIO.Server;\r\n    //private _httpServer: http.Server;\r\n    private _playerList: Player[] = [];\r\n    private _indexDir: string;\r\n    private _indexPath: string;\r\n\r\n    public constructor()\r\n    {\r\n        let dir = path.dirname(__dirname);\r\n        this._indexDir =  path.join(dir, \"/public\");\r\n        this._indexPath = path.join(dir, \"/public/index.html\");\r\n\r\n        //assign it to variable app\r\n        let app = express();\r\n        // send a index.html file when a get request is fired to the given \r\n        // route, which is ‘/’ in this case\r\n        app.get(\"/\", (req, res) =>\r\n        {\r\n            res.sendFile(this._indexPath);\r\n        });\r\n\r\n        // this means when a get request is made to ‘/public’, put all the \r\n        // static files inside the client folder \r\n        // Under ‘/public’. See for more details below\r\n        app.use(\"/\", express.static(this._indexDir));\r\n        // create a server and pass in app as a request handler\r\n        let httpServer = http.createServer(app); //Server-11\r\n        // binds the serv object we created to socket.io\r\n        this._ioServer = socketIO(httpServer, {});\r\n        // listen on port 2000\r\n        httpServer.listen(process.env.PORT || 2000);\r\n        console.log(\"Server started.\");\r\n\r\n        // listen for a connection request from any client\r\n        this._ioServer.sockets.on(\"connection\", (socket) => { this.OnConnect(socket); });\r\n    }\r\n\r\n    private OnConnect(socket: SocketIO.Socket): void\r\n    {\r\n        // output a unique socket.id\r\n        console.log(`socket connected, id = ${socket.id}`);\r\n\r\n        // listen for disconnection;\r\n        // OnClientdisconnect\r\n        socket.on('disconnect', () =>\r\n        {\r\n            console.log('disconnect');\r\n            let removePlayer = this.FindPlayerById(socket.id);\r\n\r\n            if (removePlayer)\r\n            {\r\n                this._playerList.splice(this._playerList.indexOf(removePlayer), 1);\r\n            }\r\n\r\n            console.log(\"removing player \" + socket.id);\r\n\r\n            // Send message to every connected client except the sender\r\n            socket.broadcast.emit('remove_player', { id: socket.id });\r\n        });\r\n\r\n        // Listen for new player\r\n        // OnNewplayer\r\n        socket.on(\"new_player\", (data: { x: number, y: number, angle: number }) =>\r\n        {\r\n            console.log(\"new_player: \" + data);\r\n            // new player instance\r\n            let newPlayer = new Player(data.x, data.y, data.angle);\r\n            console.log(`newPlayer = ${newPlayer}`);\r\n            console.log(`created new player with id = ${socket.id}`);\r\n            newPlayer.id = socket.id;\r\n            // information to be sent to all clients except sender\r\n            let currentInfo = {\r\n                id: newPlayer.id,\r\n                x: newPlayer.x,\r\n                y: newPlayer.y,\r\n                angle: newPlayer.angle\r\n            };\r\n            // send to the new player about everyone who is already connected\r\n            for (let i = 0; i < this._playerList.length; i++)\r\n            {\r\n                let existingPlayer = this._playerList[i];\r\n                var playerInfo = {\r\n                    id: existingPlayer.id,\r\n                    x: existingPlayer.x,\r\n                    y: existingPlayer.y,\r\n                    angle: existingPlayer.angle,\r\n                };\r\n                console.log(\"pushing player\");\r\n                // send message to the sender-client only\r\n                socket.emit(\"new_enemyPlayer\", playerInfo);\r\n            }\r\n\r\n            // send message to every connected client except the sender\r\n            socket.broadcast.emit('new_enemyPlayer', currentInfo);\r\n\r\n            this._playerList.push(newPlayer);\r\n        });\r\n\r\n        // listen for player position update\r\n        // OnMovePlayer\r\n        socket.on(\"move_player\", (data: { x: number, y: number, angle: number }) =>\r\n        {\r\n            let movePlayer = this.FindPlayerById(socket.id);\r\n            movePlayer.x = data.x;\r\n            movePlayer.y = data.y;\r\n            movePlayer.angle = data.angle;\r\n\r\n            let movePlayerData = {\r\n                id: movePlayer.id,\r\n                x: movePlayer.x,\r\n                y: movePlayer.y,\r\n                angle: movePlayer.angle\r\n            }\r\n\r\n            //send message to every connected client except the sender\r\n            socket.broadcast.emit('enemy_move', movePlayerData);\r\n        });\r\n    }\r\n\r\n    private FindPlayerById(id: string): Player\r\n    {\r\n        for (var i = 0; i < this._playerList.length; i++)\r\n        {\r\n            if (this._playerList[i].id == id)\r\n            {\r\n                return this._playerList[i];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n\r\nnew GameServer();\r\n"]}